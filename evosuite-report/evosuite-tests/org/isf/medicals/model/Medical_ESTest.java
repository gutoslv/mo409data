/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 15:05:53 GMT 2024
 */

package org.isf.medicals.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.isf.medicals.model.Medical;
import org.isf.medtype.model.MedicalType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Medical_ESTest extends Medical_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3063);
      MedicalType medicalType0 = new MedicalType("Bz+{[+YfGl`=;", "Bz+{[+YfGl`=;");
      Integer integer1 = new Integer((-2371));
      Medical medical0 = new Medical(integer0, medicalType0, "Bz+{[+YfGl`=;", "", 2019, integer1, 3063, 3063, (-1328.73));
      assertEquals((-2371), (int)medical0.getPcsperpck());
      assertEquals(3063.0, medical0.getMinqty(), 0.01);
      assertEquals("Bz+{[+YfGl`=;", medical0.getProd_code());
      assertEquals(3063, (int)medical0.getCode());
      assertEquals(6410.73, medical0.getTotalQuantity(), 0.01);
      assertEquals("", medical0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(133);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "+P", "2/N<(x%.P", (-1.0), integer0, (-764.38), (-1.0), (-2473));
      String string0 = medical0.toString();
      assertEquals("+P", medical0.getProd_code());
      assertEquals("2/N<(x%.P", string0);
      assertEquals(2471.0, medical0.getTotalQuantity(), 0.01);
      assertEquals((-764.38), medical0.getMinqty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = Integer.valueOf(426);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "2@:", "", 426, integer0, 426, 426, 426);
      String string0 = medical0.toString();
      assertEquals("2@:", medical0.getProd_code());
      assertEquals(426.0, medical0.getTotalQuantity(), 0.01);
      assertEquals("", string0);
      assertEquals(426.0, medical0.getMinqty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-664));
      Medical medical0 = new Medical(integer0);
      medical0.setInqty(1.0);
      double double0 = medical0.getTotalQuantity();
      assertEquals(1.0, medical0.getInqty(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Medical medical0 = new Medical((Integer) null);
      medical0.setInqty((-87.17975772627602));
      double double0 = medical0.getTotalQuantity();
      assertEquals((-87.17975772627602), medical0.getInqty(), 0.01);
      assertEquals((-87.17975772627602), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1405);
      MedicalType medicalType0 = new MedicalType("org.isf.medicals.model.Medical", "org.isf.medicals.model.Medical");
      Medical medical0 = new Medical(integer0, medicalType0, "org.isf.medicals.model.Medical", "", 0.0, integer0, 1405, 0.0, 2008.25989029758);
      String string0 = medical0.getProd_code();
      assertEquals(0.0, medical0.getInitialqty(), 0.01);
      assertEquals(0.0, medical0.getInqty(), 0.01);
      assertEquals(1405.0, medical0.getMinqty(), 0.01);
      assertEquals((-2008.25989029758), medical0.getTotalQuantity(), 0.01);
      assertEquals("org.isf.medicals.model.Medical", string0);
      assertEquals("", medical0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(23);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "", "B", 2009.9428347665, integer0, 0.0, 1594.2348124314, 1594.2348124314);
      String string0 = medical0.getProd_code();
      assertEquals(2009.9428347665, medical0.getTotalQuantity(), 0.01);
      assertEquals(0.0, medical0.getMinqty(), 0.01);
      assertEquals("", string0);
      assertEquals("B", medical0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1405);
      MedicalType medicalType0 = new MedicalType("org.isf.medicals.model.Medical", "org.isf.medicals.model.Medical");
      Medical medical0 = new Medical(integer0, medicalType0, "org.isf.medicals.model.Medical", "", 0.0, integer0, 1405, 0.0, 2008.25989029758);
      medical0.getPcsperpck();
      assertEquals((-2008.25989029758), medical0.getTotalQuantity(), 0.01);
      assertEquals(1405.0, medical0.getMinqty(), 0.01);
      assertEquals(0.0, medical0.getInqty(), 0.01);
      assertEquals(0.0, medical0.getInitialqty(), 0.01);
      assertEquals("org.isf.medicals.model.Medical", medical0.getProd_code());
      assertEquals("", medical0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1405);
      MedicalType medicalType0 = new MedicalType("org.isf.medicals.model.Medical", "org.isf.medicals.model.Medical");
      Medical medical0 = new Medical(integer0, medicalType0, "org.isf.medicals.model.Medical", "", 0.0, integer0, 1405, 0.0, 2008.25989029758);
      double double0 = medical0.getOutqty();
      assertEquals((-2008.25989029758), medical0.getTotalQuantity(), 0.01);
      assertEquals(0.0, medical0.getInqty(), 0.01);
      assertEquals(1405.0, medical0.getMinqty(), 0.01);
      assertEquals(2008.25989029758, double0, 0.01);
      assertEquals(0.0, medical0.getInitialqty(), 0.01);
      assertEquals("", medical0.toString());
      assertEquals("org.isf.medicals.model.Medical", medical0.getProd_code());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(23);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "", "B", 2009.9428347665, integer0, 0.0, 1594.2348124314, 1594.2348124314);
      medical0.setMinqty((-341.288293));
      double double0 = medical0.getMinqty();
      assertEquals((-341.288293), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3063);
      MedicalType medicalType0 = new MedicalType("Bz+{[+YfGl`=;", "Bz+{[+YfGl`=;");
      Medical medical0 = new Medical(integer0, medicalType0, "Bz+{[+YfGl`=;", "", 2019, integer0, 3063, 3063, (-1328.73));
      double double0 = medical0.getInitialqty();
      assertEquals(2019.0, double0, 0.01);
      assertEquals("Bz+{[+YfGl`=;", medical0.getProd_code());
      assertEquals("", medical0.toString());
      assertEquals(6410.73, medical0.getTotalQuantity(), 0.01);
      assertEquals(3063.0, medical0.getMinqty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Medical medical0 = new Medical((Integer) null, (MedicalType) null, "", "+D8EP", (-143.714), (Integer) null, (-143.714), (-1.0), (-1.0));
      double double0 = medical0.getInitialqty();
      assertEquals((-143.714), double0, 0.01);
      assertEquals("", medical0.getProd_code());
      assertEquals((-143.714), medical0.getMinqty(), 0.01);
      assertEquals("+D8EP", medical0.toString());
      assertEquals((-143.714), medical0.getTotalQuantity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = Integer.valueOf(426);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "2@:", "", 426, integer0, 426, 426, 426);
      medical0.getCode();
      assertEquals(426.0, medical0.getTotalQuantity(), 0.01);
      assertEquals("", medical0.toString());
      assertEquals(426.0, medical0.getMinqty(), 0.01);
      assertEquals("2@:", medical0.getProd_code());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1405);
      Medical medical0 = new Medical(integer0);
      medical0.setDescription("\"x\"5.8lXEBT`eSF");
      MedicalType medicalType0 = new MedicalType("org.isf.medicals.model.Medical", "org.isf.medicals.model.Medical");
      Medical medical1 = new Medical(integer0, medicalType0, "org.isf.medicals.model.Medical", "", 0.0, integer0, 1405, 0.0, 2008.25989029758);
      assertEquals("", medical1.getDescription());
      
      medical1.setDescription("lDe>m2[V");
      int int0 = medical0.compareTo(medical1);
      assertEquals((-74), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Medical medical0 = new Medical((Integer) null);
      // Undeclared exception!
      try { 
        medical0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.isf.medicals.model.Medical", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-664));
      Medical medical0 = new Medical(integer0);
      MedicalType medicalType0 = medical0.getType();
      assertNull(medicalType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = Integer.valueOf(404);
      Medical medical0 = new Medical(integer0);
      String string0 = medical0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Medical medical0 = new Medical();
      double double0 = medical0.getOutqty();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-664));
      Medical medical0 = new Medical(integer0);
      String string0 = medical0.getProd_code();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Medical medical0 = new Medical();
      Integer integer0 = medical0.getCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Medical medical0 = new Medical();
      double double0 = medical0.getInqty();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Medical medical0 = new Medical();
      double double0 = medical0.getInitialqty();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-664));
      Medical medical0 = new Medical(integer0);
      medical0.hashCode();
      medical0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(133);
      MedicalType medicalType0 = new MedicalType("+P", "org.isf.utils.dbAud~table");
      Medical medical0 = new Medical(integer0, medicalType0, "+P", "2/N<(x%.P", (-1.0), integer0, (-764.38), (-1.0), (-2473));
      Object object0 = medical0.clone();
      medical0.setInitialqty((-2533));
      boolean boolean0 = medical0.equals(object0);
      assertEquals((-2533.0), medical0.getInitialqty(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(23);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "", "B", 2009.9428347665, integer0, 0.0, 1594.2348124314, 1594.2348124314);
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      boolean boolean0 = medical0.equals(hijrahDate0);
      assertEquals(2009.9428347665, medical0.getTotalQuantity(), 0.01);
      assertEquals(0.0, medical0.getMinqty(), 0.01);
      assertEquals("", medical0.getProd_code());
      assertFalse(boolean0);
      assertEquals("B", medical0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Medical medical0 = new Medical((Integer) null);
      boolean boolean0 = medical0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Medical medical0 = new Medical();
      MedicalType medicalType0 = new MedicalType("", "");
      medical0.setType(medicalType0);
      assertEquals(1, medical0.getActive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = Integer.valueOf(404);
      Medical medical0 = new Medical(integer0);
      medical0.setDescription("=ZIh<!uev8L");
      String string0 = medical0.getDescription();
      assertEquals("=ZIh<!uev8L", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Medical medical0 = new Medical();
      medical0.setOutqty(0.0);
      assertEquals(0.0, medical0.getOutqty(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Medical medical0 = new Medical();
      double double0 = medical0.getMinqty();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-664));
      Medical medical0 = new Medical(integer0);
      medical0.setInqty(1.0);
      double double0 = medical0.getInqty();
      assertEquals(1.0, medical0.getTotalQuantity(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Medical medical0 = new Medical();
      medical0.setProd_code("Bz+{[+YfGl`=;");
      assertNull(medical0.getLock());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Medical medical0 = new Medical();
      Integer integer0 = medical0.getLock();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Medical medical0 = new Medical();
      double double0 = medical0.getTotalQuantity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = Integer.valueOf(426);
      MedicalType medicalType0 = new MedicalType();
      Medical medical0 = new Medical(integer0, medicalType0, "2@:", "", 426, integer0, 426, 426, 426);
      medical0.setPcsperpck(integer0);
      assertEquals(426.0, medical0.getMinqty(), 0.01);
      assertEquals("", medical0.getDescription());
      assertEquals("2@:", medical0.getProd_code());
      assertEquals(426.0, medical0.getTotalQuantity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Medical medical0 = new Medical((Integer) null);
      medical0.setCode((Integer) null);
      assertNull(medical0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Medical medical0 = new Medical();
      Integer integer0 = medical0.getPcsperpck();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Medical medical0 = new Medical();
      Integer integer0 = new Integer(2147483645);
      medical0.setLock(integer0);
      assertNull(medical0.getCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Medical medical0 = new Medical();
      String string0 = medical0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(3063);
      MedicalType medicalType0 = new MedicalType("Bz+{[+YfGl`=;", "Bz+{[+YfGl`=;");
      Medical medical0 = new Medical(integer0, medicalType0, "Bz+{[+YfGl`=;", "", 2019, integer0, 3063, 3063, (-1328.73));
      boolean boolean0 = medical0.equals(medical0);
      assertEquals(2019.0, medical0.getInitialqty(), 0.01);
      assertEquals(3063.0, medical0.getMinqty(), 0.01);
      assertEquals(6410.73, medical0.getTotalQuantity(), 0.01);
      assertEquals((-1328.73), medical0.getOutqty(), 0.01);
      assertEquals("", medical0.toString());
      assertTrue(boolean0);
      assertEquals("Bz+{[+YfGl`=;", medical0.getProd_code());
      assertEquals(3063.0, medical0.getInqty(), 0.01);
  }
}
